service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_NAME_INDEX: TodosNameIndex
    TODOS_ID_INDEX: TodosIdIndex
    TODOS_S3_BUCKET: serverless-todos-t8uffesg68-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_NAME_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_ID_INDEX}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*

custom: #Come per le variabili di ambiente possiamo usare qualsiasi parte di questa sezione nel resto del yml file
  todoTopicName: todoTopic-${self:provider.stage}

  serverless-offline:
    port: 3003 #Emulazione dell'api gateway sulla porta 3003 

  dynamodb:
    start:
      port: 8000 #Emulazione di dynamodb sulla porta 8000
      inMemory: true #I dati vengono salvati in memoria
      migrate: true #Le tabelle vanno create in accorodo a come le abbiamo definite nel file yml
    stages:
      - ${self:provider.stage}
      
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          reqValidatorName: RequestBodyValidator

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          reqValidatorName: RequestBodyValidator

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          reqValidatorName: RequestBodyValidator

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          reqValidatorName: RequestBodyValidator

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    TodosDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_NAME_INDEX}
            KeySchema:
            - AttributeName: name
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TODOS_ID_INDEX}
            KeySchema:
            - AttributeName: todoId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    TodoTopic: #Topic
      Type: AWS::SNS::Topic
      Properties: #Due propriet√†
        DisplayName: Todo bucket topic #Un nome da mostrare human readable
        TopicName: ${self:custom.todoTopicName} #Nome del topic da prendere dalla sezione custom del file di confiogurazione
        
    SNSTopicPolicy: #Serve per permettere ad s3 di mandare eventi a questo topic
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish #Permette di accedere all'azione publish
              Resource:
                !Ref TodoTopic #Su questo topic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}
        Topics:
          - !Ref TodoTopic

    #Al momento manca chi gestisce la notifica su questo topic
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref TodoTopic #Mandiamo al topic non ad una lambda function
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000